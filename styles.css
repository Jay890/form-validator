@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');

/* Can define variables. We need to define a scope
    meaning the root scope to use these variables
    create variables using --
    use variable is var keyword(variable name) e.g :var(--success-color)
*/

:root {
  --sucess-color: rgb(11, 185, 127);
  --error-color: rgb(172, 33, 8);
}

* {
  /* do not want any padding to affect the width of the element */
  box-sizing: border-box;
}

body {
  background-color: #f9fafb;
  font-family: 'Roboto', sans-serif;
  /* all the direct children of body will be a flex item 
    in this case we have one which is the container
  */
  display: flex;
  align-items: center;
  justify-content: center;
  /* need to specify a height to flex to work to be center center*/
  min-height: 100vh;
  margin: 0;
}

.container {
  background-color: rgb(238, 227, 212);
  border-radius: 5px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
  width: 400px;
}

h2 {
  text-align: center;
  margin: 0 0 20px;
}

.form {
  padding: 30px 40px;
}

.form-control {
  margin-bottom: 10px;
  padding-bottom: 20px;
  /* want position relative as we are going to position small tag witb absolute
    So if you want to position an element absolute within another element that parent
    element has to be relative
  */
  position: relative;
}

.form-control label {
  color: rgb(95, 128, 236);
  /* default is inline - adding display block will make label be on its own line
    small tag will be same line as input though 
  */
  display: block;
  margin-bottom: 5px;
}

.form-control input {
  border: 2px solid #fff;
  border-radius: 4px;
  /* again to have input on its own line */
  display: block;
  width: 100%;
  padding: 10px;
  font-size: 14px;
}

.form-control input:focus {
  /* stops the outline around input when clicked on */
  outline: 0;
  border-color: rgb(56, 173, 219);
}

/* We want to apply some states
    Green for correct field and red for incorrect
*/
/* you can add class in html success in form-control div 
 but we will use JS to add this dynamically
*/
.form-control.success input {
  border-color: var(--sucess-color);
}
/* you can add class in html error in form-control div 
 but we will use JS to add this dynamically
*/
.form-control.error input {
  border-color: var(--error-color);
}

.form-control small {
  color: var(--error-color);
  /* position small element absolute within the form-control */
  position: absolute;
  bottom: 0;
  left: 0;
  /* hidden initially until error occurs */
  visibility: hidden;
}

.form-control.error small {
  visibility: visible;
}

/* .form-control.success small {
  visibility: visible;
} */

.form button {
  cursor: pointer;
  background-color: rgb(16, 153, 233);
  border: 2px solid #fff;
  border-radius: 3px;
  color: #fff;
  display: block;
  font-size: 14px;
  padding: 10px;
  width: 100%;
  margin-top: 20px;
}
